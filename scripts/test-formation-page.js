const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testFormationCreation() {
  try {
    console.log('üß™ Test de cr√©ation de formation...');

    // V√©rifier la connexion √† la base de donn√©es
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // V√©rifier qu'il y a au moins un utilisateur avec le r√¥le INSTRUCTOR ou ADMIN
    const instructors = await prisma.user.findMany({
      where: {
        OR: [
          { role: 'INSTRUCTOR' },
          { role: 'ADMIN' }
        ]
      },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true
      }
    });

    console.log(`‚úÖ Trouv√© ${instructors.length} instructeur(s)/admin(s)`);
    
    if (instructors.length === 0) {
      console.log('‚ùå Aucun instructeur trouv√©. Cr√©ation d\'un utilisateur test...');
      
      const testUser = await prisma.user.create({
        data: {
          email: 'instructor@test.com',
          password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj6hsxq5S/kS', // password123
          firstName: 'Test',
          lastName: 'Instructor',
          organization: 'Test Organization',
          role: 'INSTRUCTOR',
          emailVerified: true,
          isActive: true
        }
      });
      
      console.log('‚úÖ Utilisateur test cr√©√©:', testUser.email);
    }

    // Test de cr√©ation d'une formation
    const testFormation = {
      title: 'Formation Test Cybers√©curit√©',
      description: 'Une formation compl√®te sur la cybers√©curit√© pour les organisations.',
      shortDescription: 'Formation cybers√©curit√© de base',
      category: 'CYBERSECURITE',
      level: 'DEBUTANT',
      instructor: 'Test Instructor',
      instructorId: instructors[0]?.id || (await prisma.user.findFirst({ where: { role: 'INSTRUCTOR' } }))?.id,
      duration: '8',
      price: 0,
      language: 'fr',
      tags: ['cybers√©curit√©', 'formation', 's√©curit√©'],
      prerequisites: ['Connaissances informatiques de base'],
      objectives: ['Comprendre les bases de la cybers√©curit√©', 'Identifier les menaces courantes'],
      status: 'DRAFT',
      featured: false,
      certificateEnabled: true,
      allowDiscussions: true
    };

    const formation = await prisma.formation.create({
      data: testFormation
    });

    console.log('‚úÖ Formation cr√©√©e avec succ√®s:', formation.id);

    // Test de cr√©ation d'un module
    const testModule = {
      title: 'Introduction √† la cybers√©curit√©',
      description: 'Module d\'introduction aux concepts de base',
      duration: 60,
      type: 'VIDEO',
      content: 'Contenu du module d\'introduction...',
      order: 0,
      formationId: formation.id
    };

    const module = await prisma.module.create({
      data: testModule
    });

    console.log('‚úÖ Module cr√©√© avec succ√®s:', module.id);

    // Test de cr√©ation d'un quiz
    const testQuiz = {
      passingScore: 70,
      timeLimit: 30,
      allowRetries: true,
      showCorrectAnswers: true,
      moduleId: module.id,
      questions: {
        create: [
          {
            question: 'Qu\'est-ce que la cybers√©curit√© ?',
            type: 'MULTIPLE_CHOICE',
            options: [
              'Protection des syst√®mes informatiques',
              'Cr√©ation de logiciels',
              'Gestion de bases de donn√©es',
              'D√©veloppement web'
            ],
            correctAnswer: '0',
            explanation: 'La cybers√©curit√© concerne la protection des syst√®mes informatiques.',
            points: 1,
            order: 0
          }
        ]
      }
    };

    const quiz = await prisma.quiz.create({
      data: testQuiz,
      include: {
        questions: true
      }
    });

    console.log('‚úÖ Quiz cr√©√© avec succ√®s:', quiz.id);

    // Nettoyer les donn√©es de test
    await prisma.quiz.delete({ where: { id: quiz.id } });
    await prisma.module.delete({ where: { id: module.id } });
    await prisma.formation.delete({ where: { id: formation.id } });

    console.log('‚úÖ Donn√©es de test nettoy√©es');
    console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

testFormationCreation();
